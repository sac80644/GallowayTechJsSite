
/*********************************
 * Clues on how to get it to work.
 * https://www.excitoninteractive.com/articles/read/61/webpack4/step-by-step-javascript-and-css
*********************************/

/*********************************
* environment and imports
*********************************/
const environment = process.env.NODE_ENV || "development";

const path = require('path');
const CleanWebpackPlugin = require('clean-webpack-plugin');
const CopyWebpackPlugin = require('copy-webpack-plugin');
const webpack = require('webpack');
const HtmlWebpackPlugin = require('html-webpack-plugin')
const UglifyJsPlugin = require("uglifyjs-webpack-plugin");
const MiniCssExtractPlugin = require('mini-css-extract-plugin');


/*********************************
/ entry - what file to scan to get dependencies
*********************************/
const entry = {
    //default - main: './src/index.js'
    main: './src/index.js'
}

/*********************************
/ output
*********************************/
const output = {
    //default:
    path: path.resolve(__dirname, 'dist'),
    filename: '[name].bundle.js'
}

/*********************************
/ devtool
*********************************/
const devtool = 'inline-source-map'; // devtool: '#source-map'

/*********************************
/ devServer
*********************************/
const devServer = {
    contentBase: './dist',
    hot: false
}

/*********************************
/ Plugins
*********************************/
const plugins = [
    
    //clear output before build
    //https://github.com/johnagan/clean-webpack-plugin
    new CleanWebpackPlugin(),
    
    //copy what i need to dist
    // new CopyWebpackPlugin([
    //     { 
    //         from: './src/content', 
    //         to: './content', 
    //         ignore: ['*.js'] 
    //     }
    // ]),

    //https://github.com/jantimon/html-webpack-plugin
    new HtmlWebpackPlugin({
        template: './src/index.html'
    }),

    //https://github.com/webpack-contrib/mini-css-extract-plugin
    new MiniCssExtractPlugin({
        // Options similar to the same options in webpackOptions.output
        // both options are optional
        // filename: '[name].css',
        filename: 'styles.css',
        chunkFilename: '[id].css',
      }),

    //can shrink from say 1,795 KB to 355 KB but build time is slow.  use only for production build
    //https://github.com/webpack-contrib/uglifyjs-webpack-plugin
    //does not work with es6 +
    //needs to be set in optimize section below
    // new UglifyJsPlugin(),

    //new uglify - for possible future use
    //https://github.com/mishoo/UglifyJS2/tree/harmony

    //hmr
    new webpack.HotModuleReplacementPlugin()
];

/*********************************
/ Module
*********************************/
const _module = {
    rules: [
        
        //CSS Option #1
        //importing css into js modules
        // {
        //   test: /\.css$/i,
        //   use: ['style-loader', 'css-loader'],
        // },

        //CSS Option #2
        //moves all required .css into a new file instead of bundling with js
        //https://github.com/webpack-contrib/mini-css-extract-plugin
        {
            test: /\.css$/,
            use: [
              {
                loader: MiniCssExtractPlugin.loader,
                options: {
                  // you can specify a publicPath here
                  // by default it uses publicPath in webpackOptions.output
                  publicPath: '../',
                  hmr: devServer.hot, // process.env.NODE_ENV === 'development',
                },
              },
              'css-loader',
            ],
        },

        //importing html into js modules
        //Official - Exports HTML as string. HTML is minimized when the compiler demands.
        //https://github.com/webpack-contrib/html-loader
        {
            test: /\.(html)$/,
            use: {
              loader: 'html-loader'
            }
        },

        //The file-loader resolves import/require() on a file into a url and emits the file into the output directory.
        //https://github.com/webpack-contrib/file-loader
        {
            test: /\.(png|svg|jpg|gif|ico)$/,
            use: [
                'file-loader'
            ]
        },

        //https://github.com/babel/babel-loader
        //https://babeljs.io/blog/2015/10/29/6.0.0/
        {
            test: /\.js$/,
            exclude: /(node_modules|bower_components)/,
            use: [
              { loader: 'babel-loader' }
            ]
        }
    ]
}

/*********************************
* Optimization
*********************************/
const optimization = {
    minimize: false,  //by default will not minimize unless mode is production or none.
    minimizer: [new UglifyJsPlugin()]
}

/*********************************
/ Exports
*********************************/
module.exports = {
    mode: environment,
    entry: entry,
    output: output,
    devtool: devtool,
    devServer: devServer,
    plugins: plugins,
    module: _module,
    optimization: optimization
}
